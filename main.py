import os
import subprocess
import cv2
from pyzbar.pyzbar import decode
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from pymemuc import PyMemuc
from settings import *
from banks import tinkoff_bank, ozon_bank, yandex_bank

bot = Bot(token=BOT_TOKEN)


def contains_qr_code(image_path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ QR-–∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    try:
        image = cv2.imread(image_path)
        decoded_objects = decode(image)
        return len(decoded_objects) > 0
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ QR-–∫–æ–¥–∞: {e}")
        return False


def get_adb_devices(adb_path: str) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö ADB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    result = subprocess.check_output([adb_path, "devices"]).decode("utf-8")
    devices = []
    for line in result.strip().split("\n")[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        if line.strip() and "device" in line:
            device_id = line.split()[0]
            devices.append(device_id)
    return devices


def connect_memu(file_path: str, file_name: str) -> str:
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —ç–º—É–ª—è—Ç–æ—Ä—É –ø–æ –∏–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ adb_id –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª."""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ adb_id –ø–æ –∏–º–µ–Ω–∏ VM
    adb_id = MEMU_ADB_PORTS.get(MEMU_VM_NAME)
    if not adb_id:
        raise Exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: '{MEMU_VM_NAME}'")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ —ç—Ç–æ—Ç ADB ID
    connected_devices = get_adb_devices(ADB_PATH)
    print(f"üì± –ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ ADB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {connected_devices}")

    if adb_id not in connected_devices:
        raise Exception(f"‚ö†Ô∏è –≠–º—É–ª—è—Ç–æ—Ä '{MEMU_VM_NAME}' —Å ADB ID '{adb_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç–º—É–ª—è—Ç–æ—Ä
    try:
        subprocess.run([ADB_PATH, "-s", adb_id, "push", file_path, f"/sdcard/Pictures/Telegram/{file_name}"], check=True)
        print(f"üì• –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ —ç–º—É–ª—è—Ç–æ—Ä {MEMU_VM_NAME} ({adb_id})")
    except subprocess.CalledProcessError as e:
        raise Exception(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–∞–π–ª–∞ –≤ —ç–º—É–ª—è—Ç–æ—Ä '{MEMU_VM_NAME}': {e}")

    return adb_id



async def process_qr(update: Update, context: CallbackContext):
    adb_id = ''
    message = update.effective_message

    print(f'–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞: {message.chat.id}, id —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n')

    if not message.photo:
        print("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    try:
        file_id = message.photo[-1].file_id
        file = await context.bot.get_file(file_id)
        if not os.path.exists(SAVE_FOLDER):
            os.makedirs(SAVE_FOLDER, exist_ok=True)
        file_name = f"{MEMU_VM_NAME}_{message.message_id}.jpg"
        file_path = os.path.join(SAVE_FOLDER, file_name)
        await file.download_to_drive(file_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è QR-–∫–æ–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    if not contains_qr_code(file_path):
        print(f"QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ {file_path}")
        return  # –ü—É—Å—Ç–æ–π return, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

    try:
        adb_id = connect_memu(file_path, file_name)
    except Exception as e:
        print(e)
        await context.bot.send_message(chat_id=CHAT_ID, text=str(e))

    # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –±–∞–Ω–∫
    try:
        if BANK == "yandex":
            yandex_bank(ADB_PATH, adb_id)
            bank_name = '–Ø–Ω–¥–µ–∫—Å'
        elif BANK == "ozon":
            ozon_bank(ADB_PATH, adb_id)
            bank_name = '–û–∑–æ–Ω'
        elif BANK == "tinkoff":
            tinkoff_bank(ADB_PATH, adb_id)
            bank_name = '–¢–ë–∞–Ω–∫'
        else:
            raise Exception("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
        await context.bot.send_message(chat_id=CHAT_ID, text=f"–û–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ {bank_name} –±–∞–Ω–∫")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
        await context.bot.send_message(chat_id=CHAT_ID, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")


def main():
    print("–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª settings.py!!!\n–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, process_qr))
    app.run_polling()


if __name__ == "main":
    main()

    # print(connect_memu(os.path.join(SAVE_FOLDER, f"qr_124.jpg")))
    # tinkoff_bank("127.0.0.1:21503")